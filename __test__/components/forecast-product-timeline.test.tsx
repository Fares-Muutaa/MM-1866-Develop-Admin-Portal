import { render, screen, waitFor } from "@testing-library/react"
import fetchMock from "jest-fetch-mock"
import "@testing-library/jest-dom"
import { ForecastProductTimeline } from "@/components/rafed-provider/forecast-product-timeline"

beforeEach(() => {
    fetchMock.resetMocks()
})

test("renders ForecastProductTimeline with fetched data", async () => {
    // 1. Mock forecast types
    fetchMock.mockResponses(
        [
            JSON.stringify([
                {
                    id: 1,
                    name: "Rafed Forecast",
                    description: "Forecast generated by Rafed",
                    isEditable: false,
                    color: "#8884d8",
                    lineType: "5 5"
                }
            ]),
            { status: 200 }
        ],
        // 2. Mock products
        [
            JSON.stringify([
                {
                    id: 1,
                    name: "Product A",
                    classificationId: 1
                }
            ]),
            { status: 200 }
        ],
        // 3. Mock timeline data
        [
            JSON.stringify([
                {
                    forecastExecutionId: 1,
                    productId: 1,
                    forecastTypeId: 1,
                    type: "forecast",
                    value: 100,
                    date: "2025-01-01"
                }
            ]),
            { status: 200 }
        ]
    )

    render(<ForecastProductTimeline forecastExecutionId={1} />)

    // Vérifie que le loader est visible
    await waitFor(() => {
        expect(screen.getByRole("status")).toBeInTheDocument()
    })

    // Vérifie que le nom du produit est affiché après le chargement
    await waitFor(() => {
        expect(screen.getByText("Product A")).toBeInTheDocument()
    })

    // Vérifie que le type de prévision est affiché aussi
    await waitFor(() => {
        expect(screen.getByText("Rafed Forecast")).toBeInTheDocument()
    })
})
