"use client"

import type React from "react"

import { useState, useEffect } from "react"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Edit2, Search, Filter } from "lucide-react"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { toast } from "@/components/ui/use-toast"

interface Product {
  id: number
  productName: string
  description?: string
  classificationId?: number
}

interface Classification {
  id: number
  name: string
  description?: string
}

interface ForecastType {
  id: number
  name: string
  description?: string
  isEditable: boolean
}

interface ForecastData {
  productId: number
  productName: string
  classificationId: number
  classificationName: string
  sku: string
  date: string
  [key: string]: any // For dynamic forecast type columns
}

export function ForecastDataTable() {
  const [products, setProducts] = useState<Product[]>([])
  const [classifications, setClassifications] = useState<Classification[]>([])
  const [forecastTypes, setForecastTypes] = useState<ForecastType[]>([])
  const [forecastData, setForecastData] = useState<ForecastData[]>([])
  const [filteredData, setFilteredData] = useState<ForecastData[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState("")
  const [selectedCategory, setSelectedCategory] = useState<string>("all")
  const [firstForecastDate, setFirstForecastDate] = useState<string>("")

  // State for edit modal
  const [editModalOpen, setEditModalOpen] = useState(false)
  const [editingItem, setEditingItem] = useState<ForecastData | null>(null)
  const [editingForecastType, setEditingForecastType] = useState<string>("")
  const [newQuantity, setNewQuantity] = useState<number | "">("")

  // Fetch classifications from the database
  useEffect(() => {
    const fetchClassifications = async () => {
      try {
        const response = await fetch("/api/classifications")
        if (!response.ok) {
          throw new Error("Failed to fetch classifications")
        }
        const data = await response.json()
        setClassifications(data)
      } catch (error) {
        console.error("Error fetching classifications:", error)
        // Fallback to mock data if API fails
        setClassifications([
          { id: 1, name: "Pharmaceuticals", description: "Pharmaceutical products" },
          { id: 2, name: "Medical Devices", description: "Medical equipment and devices" },
          { id: 3, name: "Consumables", description: "Medical consumables and supplies" },
        ])
      }
    }

    fetchClassifications()
  }, [])

  // Fetch forecast types from the database
  useEffect(() => {
    const fetchForecastTypes = async () => {
      try {
        const response = await fetch("/api/forecast-types")
        if (!response.ok) {
          throw new Error("Failed to fetch forecast types")
        }
        const data = await response.json()
        // Filter out Historical type
        const filteredTypes = data.filter((type: ForecastType) => type.name !== "Historical Data")
        setForecastTypes(filteredTypes)
      } catch (error) {
        console.error("Error fetching forecast types:", error)
        // Fallback to mock data if API fails
        setForecastTypes([
          { id: 1, name: "Rafed Forecast", description: "Forecast generated by Rafed", isEditable: false },
          {
            id: 2,
            name: "Provider Forecast",
            description: "Forecast provided by healthcare provider",
            isEditable: true,
          },
        ])
      }
    }

    fetchForecastTypes()
  }, [])

  // Fetch products from the database
  useEffect(() => {
    const fetchProducts = async () => {
      try {
        const response = await fetch("/api/products")
        if (!response.ok) {
          throw new Error("Failed to fetch products")
        }
        const data = await response.json()
        setProducts(data)
      } catch (error) {
        console.error("Error fetching products:", error)
        // Fallback to mock data if API fails
        setProducts([
          {
            id: 1,
            name: "Paracétamol 500mg",
            description: "Analgésique et antipyrétique courant",
            classificationId: 1,
          },
          { id: 2, name: "Amoxicilline 250mg", description: "Antibiotique à large spectre", classificationId: 1 },
          { id: 3, name: "Insuline Lantus", description: "Insuline à action prolongée", classificationId: 1 },
          {
            id: 4,
            name: "Moniteur cardiaque",
            description: "Appareil de surveillance des fonctions cardiaques",
            classificationId: 2,
          },
          {
            id: 5,
            name: "Ventilateur médical",
            description: "Appareil d'assistance respiratoire",
            classificationId: 2,
          },
        ])
      }
    }

    fetchProducts()
  }, [])

  // Fetch forecast data for all products
  useEffect(() => {
    if (products.length > 0 && forecastTypes.length > 0 && classifications.length > 0) {
      setLoading(true)
      fetchAllForecastData()
    }
  }, [products, forecastTypes, classifications])

  // Apply filters when search term or selected category changes
  useEffect(() => {
    applyFilters()
  }, [searchTerm, selectedCategory, forecastData])

  const fetchAllForecastData = async () => {
    try {
      // Fetch the first forecast date (future date with forecast data)
      const dateResponse = await fetch("/api/forecast-first-date")
      if (!dateResponse.ok) {
        throw new Error("Failed to fetch first forecast date")
      }
      const { date } = await dateResponse.json()
      setFirstForecastDate(date)

      // Fetch forecast data for all products at the first forecast date
      const response = await fetch(`/api/forecast-data-all?date=${date}`)
      if (!response.ok) {
        throw new Error("Failed to fetch forecast data")
      }
      const data = await response.json()
      //console.log("Fetched forecast data:", data)
      // Process the data
      const processedData = processAllForecastData(data)
      setForecastData(processedData)
      setFilteredData(processedData)
    } catch (error) {
      console.error("Error fetching forecast data:", error)
        toast({
            title: "Error fetching forecast data",
            description: "Failed to fetch forecast data. Please try again later.",
            variant: "destructive",
        })
    } finally {
      setLoading(false)
    }
  }

  const processAllForecastData = (data: any[]) => {
    const processedData: ForecastData[] = []

    // Group data by product
    const groupedByProduct = data.reduce((acc: any, item: any) => {
      //console.log("item", item)
      if (!acc[item.productId]) {
        console.log(products, "products")
        const product = products.find((p) => p.id === item.productId)
        console.log("product", product)
        const classification = classifications.find((c) => c.id === product?.classificationId)
        console.log("classifications", classifications)
        acc[item.productId] = {
          productId: item.productId,
          productName: item?.productName || `Product ${item.productId}`,
          classificationId: item?.classificationId || 0,
          classificationName: item.classificationName || "Unknown",
          date: new Date(item.date).toLocaleDateString(),
          sku: item.classificationName?.substring(0, 4).toUpperCase() +
              "-" +
              item.productId.toString().padStart(4, "0"),
        }

      }

      // Find the forecast type name
      const forecastType = forecastTypes.find((ft) => ft.id === item.forecastTypeId)
      if (forecastType) {
        const typeName = forecastType.name.replace(/\s+/g, "")
        acc[item.productId][typeName] = Number(item.value)
      }

      return acc
    }, {})

    // Convert to array
    return Object.values(groupedByProduct)
  }

  const generateMockForecastData = () => {
    const mockData: ForecastData[] = []
    const mockDate = new Date()
    mockDate.setMonth(mockDate.getMonth() + 1) // Next month
    setFirstForecastDate(mockDate.toLocaleDateString())

    products.forEach((product) => {
      const classification = classifications.find((c) => c.id === product.classificationId)

      const dataPoint: ForecastData = {
        productId: product.id,
        productName: product.name,
        classificationId: product.classificationId || 0,
        classificationName: classification?.name || "Unknown",
        sku: product.name.substring(0, 4).toUpperCase() + "-" + product.id.toString().padStart(4, "0"),
        date: mockDate.toLocaleDateString(),
      }

      // Add data for each forecast type
      forecastTypes.forEach((type) => {
        const typeName = type.name.replace(/\s+/g, "")
        dataPoint[typeName] = Math.floor(Math.random() * 1000) + 500
      })

      mockData.push(dataPoint)
    })

    setForecastData(mockData)
    setFilteredData(mockData)
  }

  const applyFilters = () => {
    let filtered = [...forecastData]

    // Apply search filter
    if (searchTerm) {
      const term = searchTerm.toLowerCase()
      filtered = filtered.filter(
          (item) => item.productName.toLowerCase().includes(term) || item.sku.toLowerCase().includes(term),
      )
    }

    // Apply category filter
    if (selectedCategory !== "all") {
      filtered = filtered.filter((item) => item.classificationId.toString() === selectedCategory)
    }

    setFilteredData(filtered)
  }

  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(e.target.value)
  }

  const handleCategoryChange = (value: string) => {
    setSelectedCategory(value)
  }

  const handleEditClick = (item: ForecastData, forecastType: string) => {
    setEditingItem(item)
    setEditingForecastType(forecastType)
    setNewQuantity(item[forecastType] || 0)
    setEditModalOpen(true)
  }

  const handleSaveEdit = async () => {
    if (editingItem && editingForecastType && newQuantity !== "") {
      try {
        // Find the forecast type ID
        const forecastType = forecastTypes.find((ft) => ft.name.replace(/\s+/g, "") === editingForecastType)

        if (!forecastType) {
          throw new Error("Forecast type not found")
        }

        // Parse date from string to Date object
        const dateObj = new Date(editingItem.date)

        // Prepare data for API
        const updateData = {
          productId: editingItem.productId,
          forecastTypeId: forecastType.id,
          date: dateObj.toISOString(),
          value: Number(newQuantity),
        }

        // Call API to update forecast data
        const response = await fetch("/api/forecast-data", {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(updateData),
        })

        if (!response.ok) {
          throw new Error("Failed to update forecast data")
        }

        // Update the local state
        const updatedData = forecastData.map((item) => {
          if (item.productId === editingItem.productId) {
            return {
              ...item,
              [editingForecastType]: Number(newQuantity),
            }
          }
          return item
        })

        setForecastData(updatedData)

        // Apply filters to update filtered data
        applyFilters()

        // Show success toast
        toast({
          title: "Forecast updated",
          description: `Updated ${forecastType.name} for ${editingItem.productName} to ${newQuantity}`,
        })
      } catch (error) {
        console.error("Error updating forecast:", error)
        toast({
          title: "Update failed",
          description: "Failed to update forecast data. Please try again.",
          variant: "destructive",
        })
      } finally {
        // Close the modal
        setEditModalOpen(false)
        setEditingItem(null)
        setEditingForecastType("")
        setNewQuantity("")
      }
    }
  }

  if (loading) {
    return (
        <div className="flex h-[400px] items-center justify-center">
          <div className="h-8 w-8 animate-spin rounded-full border-2 border-primary border-t-transparent"></div>
        </div>
    )
  }
console.log("filteredData", filteredData)
  return (
      <div className="space-y-4">
        <div className="flex flex-col gap-4 md:flex-row md:items-center md:justify-between">
          <div className="flex flex-1 items-center space-x-2">
            <div className="relative flex-1">
              <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
              <Input placeholder="Search products..." value={searchTerm} onChange={handleSearchChange} className="pl-8" />
            </div>
            <div className="flex items-center space-x-2">
              <Filter className="h-4 w-4 text-muted-foreground" />
              <Select value={selectedCategory} onValueChange={handleCategoryChange}>
                <SelectTrigger className="w-[180px]">
                  <SelectValue placeholder="All Categories" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Categories</SelectItem>
                  {classifications.map((classification) => (
                      <SelectItem key={classification.id} value={classification.id.toString()}>
                        {classification.name}
                      </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>
        </div>

        <div className="rounded-md border">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>SKU</TableHead>
                <TableHead>Product Name</TableHead>
                <TableHead>Category</TableHead>
                <TableHead>Date</TableHead>
                {forecastTypes.map((type) => (
                    <TableHead key={type.id} className="text-right">
                      {type.name}
                    </TableHead>
                ))}
                <TableHead>Unit</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredData.length > 0 ? (
                  filteredData.map((item, index) => (
                      <TableRow key={index}>
                        <TableCell className="font-medium">{item.sku}</TableCell>
                        <TableCell>{item.productName}</TableCell>
                        <TableCell>{item.classificationName}</TableCell>
                        <TableCell>{item.date}</TableCell>
                        {forecastTypes.map((type) => {
                          const typeName = type.name.replace(/\s+/g, "")
                          return (
                              <TableCell key={type.id} className="text-right">
                                {type.isEditable ? (
                                    <button
                                        onClick={() => handleEditClick(item, typeName)}
                                        className="inline-flex items-center text-primary hover:underline focus:outline-none"
                                    >
                                      {item[typeName]?.toLocaleString() || 0}
                                      <Edit2 className="ml-1 h-3 w-3 text-muted-foreground" />
                                    </button>
                                ) : (
                                    item[typeName]?.toLocaleString() || 0
                                )}
                              </TableCell>
                          )
                        })}
                        <TableCell>Units</TableCell>
                      </TableRow>
                  ))
              ) : (
                  <TableRow>
                    <TableCell colSpan={5 + forecastTypes.length} className="h-24 text-center">
                      No forecast data available.
                    </TableCell>
                  </TableRow>
              )}
            </TableBody>
          </Table>
        </div>

        {/* Edit Forecast Modal */}
        <Dialog open={editModalOpen} onOpenChange={setEditModalOpen}>
          <DialogContent className="sm:max-w-md">
            <DialogHeader>
              <DialogTitle>Edit Forecast Quantity</DialogTitle>
              <DialogDescription>
                Update the forecast quantity for {editingItem?.productName} ({editingItem?.date})
              </DialogDescription>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              {forecastTypes.map((type) => {
                const typeName = type.name.replace(/\s+/g, "")
                if (editingItem && editingItem[typeName] !== undefined && typeName !== editingForecastType) {
                  return (
                      <div key={type.id} className="grid grid-cols-4 items-center gap-4">
                        <label className="text-right text-sm font-medium col-span-2">{type.name}:</label>
                        <div className="col-span-2 font-medium">{editingItem[typeName]?.toLocaleString() || 0} Units</div>
                      </div>
                  )
                }
                return null
              })}

              {editingForecastType && (
                  <div className="grid grid-cols-4 items-center gap-4">
                    <label htmlFor="new-forecast" className="text-right text-sm font-medium col-span-2">
                      New{" "}
                      {forecastTypes.find((ft) => ft.name.replace(/\s+/g, "") === editingForecastType)?.name || "Forecast"}:
                    </label>
                    <div className="col-span-2">
                      <Input
                          id="new-forecast"
                          type="number"
                          value={newQuantity}
                          onChange={(e) => setNewQuantity(e.target.value === "" ? "" : Number(e.target.value))}
                          min={0}
                          className="w-full"
                      />
                    </div>
                  </div>
              )}
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setEditModalOpen(false)}>
                Cancel
              </Button>
              <Button onClick={handleSaveEdit} disabled={newQuantity === ""}>
                Save Changes
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>
  )
}
